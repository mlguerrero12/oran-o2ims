//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	externalRef0 "github.com/openshift-kni/oran-o2ims/internal/service/common/api/generated"
)

// Defines values for AlarmEventNotificationNotificationEventType.
const (
	ACKNOWLEDGE AlarmEventNotificationNotificationEventType = 3
	CHANGE      AlarmEventNotificationNotificationEventType = 1
	CLEAR       AlarmEventNotificationNotificationEventType = 2
	NEW         AlarmEventNotificationNotificationEventType = 0
)

// Defines values for AlarmSubscriptionInfoFilter.
const (
	Acknowledge AlarmSubscriptionInfoFilter = "acknowledge"
	Change      AlarmSubscriptionInfoFilter = "change"
	Clear       AlarmSubscriptionInfoFilter = "clear"
	New         AlarmSubscriptionInfoFilter = "new"
)

// Defines values for AlertmanagerNotificationStatus.
const (
	Firing   AlertmanagerNotificationStatus = "firing"
	Resolved AlertmanagerNotificationStatus = "resolved"
)

// Defines values for PerceivedSeverity.
const (
	CLEARED       PerceivedSeverity = 5
	CRITICAL      PerceivedSeverity = 0
	INDETERMINATE PerceivedSeverity = 4
	MAJOR         PerceivedSeverity = 1
	MINOR         PerceivedSeverity = 2
	WARNING       PerceivedSeverity = 3
)

// AlarmEventNotification Alarm Event Notification sent to subscribers
type AlarmEventNotification struct {
	// AlarmAcknowledgeTime Date/Time stamp value when any value of the AlarmEventRecord has been modified.
	AlarmAcknowledgeTime *time.Time `json:"alarmAcknowledgeTime,omitempty"`

	// AlarmAcknowledged Boolean value indicating of a management system has acknowledged the alarm.
	AlarmAcknowledged bool `json:"alarmAcknowledged"`

	// AlarmChangedTime Date/Time stamp value when any value of the AlarmEventRecord has been modified.
	AlarmChangedTime time.Time `json:"alarmChangedTime"`

	// AlarmDefinitionID A reference to the Alarm Definition record in the Alarm Dictionary associated with the referenced ResourceType.
	AlarmDefinitionID openapi_types.UUID `json:"alarmDefinitionID"`

	// AlarmEventRecordId The URL to the AlarmEventRecord object.
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`

	// AlarmRaisedTime Date/Time stamp value when the AlarmEventRecord has been created.
	AlarmRaisedTime time.Time `json:"alarmRaisedTime"`

	// ConsumerSubscriptionId The value provided by the consumer in the subscription.
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored by the vendor or
	// operator to extend the information provided about the O-Cloud Alarm.
	Extensions map[string]string `json:"extensions"`

	// GlobalCloudID The global cloud identifier assigned by the SMO.e
	GlobalCloudID openapi_types.UUID `json:"globalCloudID"`

	// NotificationEventType Notification event type values
	NotificationEventType AlarmEventNotificationNotificationEventType `json:"notificationEventType"`

	// ObjectRef The URL to the AlarmEventRecord object.
	ObjectRef *string `json:"objectRef,omitempty"`

	// PerceivedSeverity This is an enumerated set of values which identify the perceived severity of the alarm.
	PerceivedSeverity PerceivedSeverity `json:"perceivedSeverity"`

	// ProbableCauseID A reference to the ProbableCause of the Alarm.
	ProbableCauseID openapi_types.UUID `json:"probableCauseID"`

	// ResourceID A reference to the resource instance which caused the alarm.
	ResourceID openapi_types.UUID `json:"resourceID"`

	// ResourceTypeID A reference to the type of resource which caused the alarm.
	ResourceTypeID openapi_types.UUID `json:"resourceTypeID"`
}

// AlarmEventNotificationNotificationEventType Notification event type values
type AlarmEventNotificationNotificationEventType int

// AlarmEventRecord defines model for AlarmEventRecord.
type AlarmEventRecord struct {
	// AlarmAcknowledged When a system acknowledges an alarm, it is then set to TRUE.
	AlarmAcknowledged bool `json:"alarmAcknowledged"`

	// AlarmAcknowledgedTime This field is populated with a Date/Time stamp value when the alarm condition is acknowledged.
	AlarmAcknowledgedTime *time.Time `json:"alarmAcknowledgedTime,omitempty"`

	// AlarmChangedTime This field is populated with a Date/Time stamp value when any value
	// of the AlarmEventRecord is modified.
	AlarmChangedTime *time.Time `json:"alarmChangedTime,omitempty"`

	// AlarmClearedTime This field is populated with a Date/Time stamp value when the alarm condition is cleared.
	AlarmClearedTime *time.Time `json:"alarmClearedTime,omitempty"`

	// AlarmDefinitionId A reference to the Alarm Definition record in the Alarm Dictionary associated with the referenced Resource Type.
	AlarmDefinitionId openapi_types.UUID `json:"alarmDefinitionId"`

	// AlarmEventRecordId Identifier of an entry in the AlarmEventRecord.
	// Locally unique within the scope of an O-Cloud instance.
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`

	// AlarmRaisedTime This field is populated with a Date/Time stamp value when the AlarmEventRecord is created.
	AlarmRaisedTime time.Time `json:"alarmRaisedTime"`

	// Extensions These are unspecified (not standardized) properties (keys) which are tailored by the vendor or
	// operator to extend the information provided about the O-Cloud Alarm.
	Extensions map[string]string `json:"extensions"`

	// PerceivedSeverity This is an enumerated set of values which identify the perceived severity of the alarm.
	PerceivedSeverity PerceivedSeverity `json:"perceivedSeverity"`

	// ProbableCauseId A reference to the ProbableCause of the Alarm.
	ProbableCauseId openapi_types.UUID `json:"probableCauseId"`

	// ResourceTypeID A reference to the type of resource which caused the alarm.
	ResourceTypeID openapi_types.UUID `json:"resourceTypeID"`
}

// AlarmEventRecordModifications defines model for AlarmEventRecordModifications.
type AlarmEventRecordModifications struct {
	// AlarmAcknowledged Acknowledge an alarm.
	AlarmAcknowledged *bool `json:"alarmAcknowledged,omitempty"`

	// PerceivedSeverity This is an enumerated set of values which identify the perceived severity of the alarm.
	PerceivedSeverity *PerceivedSeverity `json:"perceivedSeverity,omitempty"`
}

// AlarmServiceConfiguration defines model for AlarmServiceConfiguration.
type AlarmServiceConfiguration struct {
	// Extensions List of metadata key-value pairs used to associate meaningful metadata to the related alarm service
	Extensions *map[string]string `json:"extensions,omitempty"`

	// RetentionPeriod Number of days for alarm history to be retained.
	// This value has cannot be set lower than 1 (day).
	RetentionPeriod int `json:"retentionPeriod"`
}

// AlarmSubscriptionInfo defines model for AlarmSubscriptionInfo.
type AlarmSubscriptionInfo struct {
	// Callback The fully qualified URI to a consumer procedure which can process a Post of the AlarmEventNotification.
	Callback string `json:"callback"`

	// ConsumerSubscriptionId Identifier for the consumer of events sent due to the Subscription.
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// Filter Criteria for events which do not need to be reported or will be filtered by the subscription
	// notification service. Therefore, if a filter is not provided then all events are reported.
	// It can be filtered by criteria based on the type of notification of fields of the
	// AlarmEventRecord.
	Filter *AlarmSubscriptionInfoFilter `json:"filter,omitempty"`

	// SubscriptionID Identifier for the Alarm Subscription. This identifier is allocated by the O-Cloud.
	SubscriptionID *openapi_types.UUID `json:"subscriptionID,omitempty"`
}

// AlarmSubscriptionInfoFilter Criteria for events which do not need to be reported or will be filtered by the subscription
// notification service. Therefore, if a filter is not provided then all events are reported.
// It can be filtered by criteria based on the type of notification of fields of the
// AlarmEventRecord.
type AlarmSubscriptionInfoFilter string

// AlertmanagerNotification Alertmanager notification payload as described here https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
type AlertmanagerNotification struct {
	Alerts []struct {
		Annotations *map[string]string `json:"annotations,omitempty"`
		EndsAt      *time.Time         `json:"endsAt,omitempty"`

		// Fingerprint Fingerprint to identify the alert
		Fingerprint *string `json:"fingerprint,omitempty"`

		// GeneratorURL Identifies the entity that caused the alert
		GeneratorURL *string            `json:"generatorURL,omitempty"`
		Labels       *map[string]string `json:"labels,omitempty"`
		StartsAt     *time.Time         `json:"startsAt,omitempty"`

		// Status Alertmanager notification status
		Status *AlertmanagerNotificationStatus `json:"status,omitempty"`
	} `json:"alerts"`
	CommonAnnotations *map[string]string `json:"commonAnnotations,omitempty"`
	CommonLabels      *map[string]string `json:"commonLabels,omitempty"`

	// ExternalURL Backlink to the Alertmanager
	ExternalURL *string `json:"externalURL,omitempty"`

	// GroupKey Key identifying the group of alerts (e.g. to deduplicate)
	GroupKey    string             `json:"groupKey"`
	GroupLabels *map[string]string `json:"groupLabels,omitempty"`
	Receiver    string             `json:"receiver"`

	// Status Alertmanager notification status
	Status AlertmanagerNotificationStatus `json:"status"`

	// Subscriber Optional subscriber information, if a subscriber is found
	Subscriber *struct {
		// CallbackUrl URL to call for notifying the subscriber
		CallbackUrl *string `json:"callbackUrl,omitempty"`
	} `json:"subscriber,omitempty"`

	// TruncatedAlerts How many alerts have been truncated due to "max_alerts"
	TruncatedAlerts *int   `json:"truncatedAlerts,omitempty"`
	Version         string `json:"version"`
}

// AlertmanagerNotificationStatus Alertmanager notification status
type AlertmanagerNotificationStatus string

// HardwareAlert Placeholder for hardware alert schema
type HardwareAlert = map[string]interface{}

// PerceivedSeverity This is an enumerated set of values which identify the perceived severity of the alarm.
type PerceivedSeverity int

// ProbableCause defines model for ProbableCause.
type ProbableCause struct {
	// Description Any additional information beyond the name to describe the probableCause derived from corresponding AlarmDefinition.
	Description string `json:"description"`

	// Name Human readable text of the probable cause derived from corresponding AlarmDefinition.
	Name string `json:"name"`

	// ProbableCauseId Identifier of the ProbableCause.
	ProbableCauseId openapi_types.UUID `json:"probableCauseId"`
}

// GetSubscriptionsParams defines parameters for GetSubscriptions.
type GetSubscriptionsParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// GetAlarmsParams defines parameters for GetAlarms.
type GetAlarmsParams struct {
	// ExcludeFields Comma separated list of field references to exclude from the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to exclude the `country` subfield of the `extensions` field:
	//
	// ```
	// exclude_fields=extensions/country
	// ```
	//
	// When this parameter isn't used no field will be excluded.
	//
	// Fields in this list will be excluded even if they are explicitly included using the
	// `fields` parameter.
	ExcludeFields *externalRef0.ExcludeFields `form:"exclude_fields,omitempty" json:"exclude_fields,omitempty"`

	// Fields Comma separated list of field references to include in the result.
	//
	// Each field reference is a field name, or a sequence of field names separated by slashes. For
	// example, to get the `name` field and the `country` subfield of the `extensions` field:
	//
	// ```
	// fields=name,extensions/country
	// ```
	//
	// When this parameter isn't used all the fields will be returned.
	Fields *externalRef0.Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Filter Search criteria.
	//
	// Contains one or more search criteria, separated by semicolons. Each search criteria is a
	// tuple containing an operator, a field reference and one or more values. The operator can
	// be any of the following strings:
	//
	// | Operator | Meaning                                                     |
	// |----------|-------------------------------------------------------------|
	// | `cont`   | Matches if the field contains the value                     |
	// | `eq`     | Matches if the field is equal to the value                  |
	// | `gt`     | Matches if the field is greater than the value              |
	// | `gte`    | Matches if the field is greater than or equal to the value  |
	// | `in`     | Matches if the field is one of the values                   |
	// | `lt`     | Matches if the field is less than the value                 |
	// | `lte`    | Matches if the field is less than or equal to the the value |
	// | `ncont`  | Matches if the field does not contain the value             |
	// | `neq`    | Matches if the field is not equal to the value              |
	// | `nin`    | Matches if the field is not one of the values               |
	//
	// The field reference is the name of one of the fields of the object, or a sequence of
	// name of fields separated by slashes. For example, to use the `country` sub-field inside
	// the `extensions` field:
	//
	// ```
	// filter=(eq,extensions/country,EQ)
	// ```
	//
	// The values are the arguments of the operator. For example, the `eq` operator compares
	// checks if the value of the field is equal to the value.
	//
	// The `in` and `nin` operators support multiple values. For example, to check if the `country`
	// sub-field inside the `extensions` field is either `ES` or `US:
	//
	// ```
	// filter=(in,extensions/country,ES,US)
	// ```
	//
	// When values contain commas, slashes or spaces they need to be surrounded by single quotes.
	// For example, to check if the `name` field is the string `my cluster`:
	//
	// ```
	// filter=(eq,name,'my cluster')
	// ```
	//
	// When multiple criteria separated by semicolons are used, all of them must match for the
	// complete condition to match. For example, the following will check if the `name` is
	// `my cluster` *and* the `country` extension is `ES`:
	//
	// ```
	// filter=(eq,name,'my cluster');(eq,extensions/country,ES)
	// ```
	//
	// When this parameter isn't used all the results will be returned.
	Filter *externalRef0.Filter `form:"filter,omitempty" json:"filter,omitempty"`
}

// AmNotificationJSONRequestBody defines body for AmNotification for application/json ContentType.
type AmNotificationJSONRequestBody = AlertmanagerNotification

// HwNotificationJSONRequestBody defines body for HwNotification for application/json ContentType.
type HwNotificationJSONRequestBody = HardwareAlert

// PatchAlarmServiceConfigurationJSONRequestBody defines body for PatchAlarmServiceConfiguration for application/json ContentType.
type PatchAlarmServiceConfigurationJSONRequestBody = AlarmServiceConfiguration

// UpdateAlarmServiceConfigurationJSONRequestBody defines body for UpdateAlarmServiceConfiguration for application/json ContentType.
type UpdateAlarmServiceConfigurationJSONRequestBody = AlarmServiceConfiguration

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = AlarmSubscriptionInfo

// PatchAlarmJSONRequestBody defines body for PatchAlarm for application/json ContentType.
type PatchAlarmJSONRequestBody = AlarmEventRecordModifications

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Receive Alertmanager notifications
	// (POST /internal/v1/caas-alerts/alertmanager)
	AmNotification(w http.ResponseWriter, r *http.Request)
	// Receive hardware alerts
	// (POST /internal/v1/hardware-alerts/{hwVendorName})
	HwNotification(w http.ResponseWriter, r *http.Request, hwVendorName string)
	// Get API versions
	// (GET /o2ims-infrastructureMonitoring/api_versions)
	GetAllVersions(w http.ResponseWriter, r *http.Request)
	// Retrieve the alarm service configuration
	// (GET /o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration)
	GetServiceConfiguration(w http.ResponseWriter, r *http.Request)
	// Modify individual fields of the Alarm Service Configuration.
	// (PATCH /o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration)
	PatchAlarmServiceConfiguration(w http.ResponseWriter, r *http.Request)
	// Modify all fields of the Alarm Service Configuration.
	// (PUT /o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration)
	UpdateAlarmServiceConfiguration(w http.ResponseWriter, r *http.Request)
	// Retrieve the list of alarm subscriptions
	// (GET /o2ims-infrastructureMonitoring/v1/alarmSubscriptions)
	GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams)
	// Create a new alarm subscription
	// (POST /o2ims-infrastructureMonitoring/v1/alarmSubscriptions)
	CreateSubscription(w http.ResponseWriter, r *http.Request)
	// Delete exactly one subscription
	// (DELETE /o2ims-infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	DeleteSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID)
	// Retrieve exactly one subscription
	// (GET /o2ims-infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	GetSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID)
	// Retrieve the list of alarms
	// (GET /o2ims-infrastructureMonitoring/v1/alarms)
	GetAlarms(w http.ResponseWriter, r *http.Request, params GetAlarmsParams)
	// Retrieve exactly one alarm
	// (GET /o2ims-infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	GetAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID)
	// Modify an individual alarm record
	// (PATCH /o2ims-infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	PatchAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID)
	// Get minor API versions
	// (GET /o2ims-infrastructureMonitoring/v1/api_versions)
	GetMinorVersions(w http.ResponseWriter, r *http.Request)
	// Retrieve all probable causes
	// (GET /o2ims-infrastructureMonitoring/v1/probableCauses)
	GetProbableCauses(w http.ResponseWriter, r *http.Request)
	// Retrieve exactly one probable cause
	// (GET /o2ims-infrastructureMonitoring/v1/probableCauses/{probableCauseId})
	GetProbableCause(w http.ResponseWriter, r *http.Request, probableCauseId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AmNotification operation middleware
func (siw *ServerInterfaceWrapper) AmNotification(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AmNotification(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HwNotification operation middleware
func (siw *ServerInterfaceWrapper) HwNotification(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwVendorName" -------------
	var hwVendorName string

	err = runtime.BindStyledParameterWithOptions("simple", "hwVendorName", r.PathValue("hwVendorName"), &hwVendorName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwVendorName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HwNotification(w, r, hwVendorName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAllVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetServiceConfiguration operation middleware
func (siw *ServerInterfaceWrapper) GetServiceConfiguration(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetServiceConfiguration(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAlarmServiceConfiguration operation middleware
func (siw *ServerInterfaceWrapper) PatchAlarmServiceConfiguration(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAlarmServiceConfiguration(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAlarmServiceConfiguration operation middleware
func (siw *ServerInterfaceWrapper) UpdateAlarmServiceConfiguration(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAlarmServiceConfiguration(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptions(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptions(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscription(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSubscription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmSubscriptionId" -------------
	var alarmSubscriptionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmSubscriptionId", r.PathValue("alarmSubscriptionId"), &alarmSubscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmSubscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscription(w, r, alarmSubscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscription operation middleware
func (siw *ServerInterfaceWrapper) GetSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmSubscriptionId" -------------
	var alarmSubscriptionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmSubscriptionId", r.PathValue("alarmSubscriptionId"), &alarmSubscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmSubscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscription(w, r, alarmSubscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAlarms operation middleware
func (siw *ServerInterfaceWrapper) GetAlarms(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlarmsParams

	// ------------- Optional query parameter "exclude_fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude_fields", r.URL.Query(), &params.ExcludeFields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exclude_fields", Err: err})
		return
	}

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlarms(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAlarm operation middleware
func (siw *ServerInterfaceWrapper) GetAlarm(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmEventRecordId" -------------
	var alarmEventRecordId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmEventRecordId", r.PathValue("alarmEventRecordId"), &alarmEventRecordId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmEventRecordId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAlarm(w, r, alarmEventRecordId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchAlarm operation middleware
func (siw *ServerInterfaceWrapper) PatchAlarm(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "alarmEventRecordId" -------------
	var alarmEventRecordId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "alarmEventRecordId", r.PathValue("alarmEventRecordId"), &alarmEventRecordId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "alarmEventRecordId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchAlarm(w, r, alarmEventRecordId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMinorVersions operation middleware
func (siw *ServerInterfaceWrapper) GetMinorVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMinorVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProbableCauses operation middleware
func (siw *ServerInterfaceWrapper) GetProbableCauses(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProbableCauses(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetProbableCause operation middleware
func (siw *ServerInterfaceWrapper) GetProbableCause(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "probableCauseId" -------------
	var probableCauseId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "probableCauseId", r.PathValue("probableCauseId"), &probableCauseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "probableCauseId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProbableCause(w, r, probableCauseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/internal/v1/caas-alerts/alertmanager", wrapper.AmNotification)
	m.HandleFunc("POST "+options.BaseURL+"/internal/v1/hardware-alerts/{hwVendorName}", wrapper.HwNotification)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/api_versions", wrapper.GetAllVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration", wrapper.GetServiceConfiguration)
	m.HandleFunc("PATCH "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration", wrapper.PatchAlarmServiceConfiguration)
	m.HandleFunc("PUT "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration", wrapper.UpdateAlarmServiceConfiguration)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarmSubscriptions", wrapper.GetSubscriptions)
	m.HandleFunc("POST "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarmSubscriptions", wrapper.CreateSubscription)
	m.HandleFunc("DELETE "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId}", wrapper.DeleteSubscription)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId}", wrapper.GetSubscription)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarms", wrapper.GetAlarms)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarms/{alarmEventRecordId}", wrapper.GetAlarm)
	m.HandleFunc("PATCH "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/alarms/{alarmEventRecordId}", wrapper.PatchAlarm)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/api_versions", wrapper.GetMinorVersions)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/probableCauses", wrapper.GetProbableCauses)
	m.HandleFunc("GET "+options.BaseURL+"/o2ims-infrastructureMonitoring/v1/probableCauses/{probableCauseId}", wrapper.GetProbableCause)

	return m
}

type AmNotificationRequestObject struct {
	Body *AmNotificationJSONRequestBody
}

type AmNotificationResponseObject interface {
	VisitAmNotificationResponse(w http.ResponseWriter) error
}

type AmNotification200Response struct {
}

func (response AmNotification200Response) VisitAmNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type AmNotification400Response struct {
}

func (response AmNotification400Response) VisitAmNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AmNotification500Response struct {
}

func (response AmNotification500Response) VisitAmNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type HwNotificationRequestObject struct {
	HwVendorName string `json:"hwVendorName"`
	Body         *HwNotificationJSONRequestBody
}

type HwNotificationResponseObject interface {
	VisitHwNotificationResponse(w http.ResponseWriter) error
}

type HwNotification200Response struct {
}

func (response HwNotification200Response) VisitHwNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type HwNotification400Response struct {
}

func (response HwNotification400Response) VisitHwNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type HwNotification500Response struct {
}

func (response HwNotification500Response) VisitHwNotificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type GetAllVersionsRequestObject struct {
}

type GetAllVersionsResponseObject interface {
	VisitGetAllVersionsResponse(w http.ResponseWriter) error
}

type GetAllVersions200JSONResponse externalRef0.APIVersions

func (response GetAllVersions200JSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions400ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAllVersions500ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceConfigurationRequestObject struct {
}

type GetServiceConfigurationResponseObject interface {
	VisitGetServiceConfigurationResponse(w http.ResponseWriter) error
}

type GetServiceConfiguration200JSONResponse AlarmServiceConfiguration

func (response GetServiceConfiguration200JSONResponse) VisitGetServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceConfiguration400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetServiceConfiguration400ApplicationProblemPlusJSONResponse) VisitGetServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetServiceConfiguration500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetServiceConfiguration500ApplicationProblemPlusJSONResponse) VisitGetServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarmServiceConfigurationRequestObject struct {
	Body *PatchAlarmServiceConfigurationJSONRequestBody
}

type PatchAlarmServiceConfigurationResponseObject interface {
	VisitPatchAlarmServiceConfigurationResponse(w http.ResponseWriter) error
}

type PatchAlarmServiceConfiguration200JSONResponse AlarmServiceConfiguration

func (response PatchAlarmServiceConfiguration200JSONResponse) VisitPatchAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarmServiceConfiguration400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarmServiceConfiguration400ApplicationProblemPlusJSONResponse) VisitPatchAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarmServiceConfiguration412ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarmServiceConfiguration412ApplicationProblemPlusJSONResponse) VisitPatchAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarmServiceConfiguration500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarmServiceConfiguration500ApplicationProblemPlusJSONResponse) VisitPatchAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAlarmServiceConfigurationRequestObject struct {
	Body *UpdateAlarmServiceConfigurationJSONRequestBody
}

type UpdateAlarmServiceConfigurationResponseObject interface {
	VisitUpdateAlarmServiceConfigurationResponse(w http.ResponseWriter) error
}

type UpdateAlarmServiceConfiguration200JSONResponse AlarmServiceConfiguration

func (response UpdateAlarmServiceConfiguration200JSONResponse) VisitUpdateAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAlarmServiceConfiguration400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateAlarmServiceConfiguration400ApplicationProblemPlusJSONResponse) VisitUpdateAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAlarmServiceConfiguration412ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateAlarmServiceConfiguration412ApplicationProblemPlusJSONResponse) VisitUpdateAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAlarmServiceConfiguration500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response UpdateAlarmServiceConfiguration500ApplicationProblemPlusJSONResponse) VisitUpdateAlarmServiceConfigurationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsRequestObject struct {
	Params GetSubscriptionsParams
}

type GetSubscriptionsResponseObject interface {
	VisitGetSubscriptionsResponse(w http.ResponseWriter) error
}

type GetSubscriptions200JSONResponse []AlarmSubscriptionInfo

func (response GetSubscriptions200JSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscriptions500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscriptionRequestObject struct {
	Body *CreateSubscriptionJSONRequestBody
}

type CreateSubscriptionResponseObject interface {
	VisitCreateSubscriptionResponse(w http.ResponseWriter) error
}

type CreateSubscription201JSONResponse AlarmSubscriptionInfo

func (response CreateSubscription201JSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription400ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription409ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription409ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response CreateSubscription500ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptionRequestObject struct {
	AlarmSubscriptionId openapi_types.UUID `json:"alarmSubscriptionId"`
}

type DeleteSubscriptionResponseObject interface {
	VisitDeleteSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteSubscription200Response struct {
}

func (response DeleteSubscription200Response) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription400ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response DeleteSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionRequestObject struct {
	AlarmSubscriptionId openapi_types.UUID `json:"alarmSubscriptionId"`
}

type GetSubscriptionResponseObject interface {
	VisitGetSubscriptionResponse(w http.ResponseWriter) error
}

type GetSubscription200JSONResponse AlarmSubscriptionInfo

func (response GetSubscription200JSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription404ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetSubscription500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmsRequestObject struct {
	Params GetAlarmsParams
}

type GetAlarmsResponseObject interface {
	VisitGetAlarmsResponse(w http.ResponseWriter) error
}

type GetAlarms200JSONResponse []AlarmEventRecord

func (response GetAlarms200JSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarms400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarms400ApplicationProblemPlusJSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarms403ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarms403ApplicationProblemPlusJSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarms500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarms500ApplicationProblemPlusJSONResponse) VisitGetAlarmsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarmRequestObject struct {
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`
}

type GetAlarmResponseObject interface {
	VisitGetAlarmResponse(w http.ResponseWriter) error
}

type GetAlarm200JSONResponse AlarmEventRecord

func (response GetAlarm200JSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarm400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarm400ApplicationProblemPlusJSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarm404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarm404ApplicationProblemPlusJSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAlarm500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetAlarm500ApplicationProblemPlusJSONResponse) VisitGetAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarmRequestObject struct {
	AlarmEventRecordId openapi_types.UUID `json:"alarmEventRecordId"`
	Body               *PatchAlarmJSONRequestBody
}

type PatchAlarmResponseObject interface {
	VisitPatchAlarmResponse(w http.ResponseWriter) error
}

type PatchAlarm200JSONResponse AlarmEventRecordModifications

func (response PatchAlarm200JSONResponse) VisitPatchAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarm400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarm400ApplicationProblemPlusJSONResponse) VisitPatchAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarm404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarm404ApplicationProblemPlusJSONResponse) VisitPatchAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarm409ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarm409ApplicationProblemPlusJSONResponse) VisitPatchAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarm412ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarm412ApplicationProblemPlusJSONResponse) VisitPatchAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PatchAlarm500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response PatchAlarm500ApplicationProblemPlusJSONResponse) VisitPatchAlarmResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersionsRequestObject struct {
}

type GetMinorVersionsResponseObject interface {
	VisitGetMinorVersionsResponse(w http.ResponseWriter) error
}

type GetMinorVersions200JSONResponse externalRef0.APIVersions

func (response GetMinorVersions200JSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions400ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetMinorVersions500ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCausesRequestObject struct {
}

type GetProbableCausesResponseObject interface {
	VisitGetProbableCausesResponse(w http.ResponseWriter) error
}

type GetProbableCauses200JSONResponse []ProbableCause

func (response GetProbableCauses200JSONResponse) VisitGetProbableCausesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCauses500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProbableCauses500ApplicationProblemPlusJSONResponse) VisitGetProbableCausesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCauseRequestObject struct {
	ProbableCauseId openapi_types.UUID `json:"probableCauseId"`
}

type GetProbableCauseResponseObject interface {
	VisitGetProbableCauseResponse(w http.ResponseWriter) error
}

type GetProbableCause200JSONResponse ProbableCause

func (response GetProbableCause200JSONResponse) VisitGetProbableCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCause400ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProbableCause400ApplicationProblemPlusJSONResponse) VisitGetProbableCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCause404ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProbableCause404ApplicationProblemPlusJSONResponse) VisitGetProbableCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProbableCause500ApplicationProblemPlusJSONResponse externalRef0.ProblemDetails

func (response GetProbableCause500ApplicationProblemPlusJSONResponse) VisitGetProbableCauseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Receive Alertmanager notifications
	// (POST /internal/v1/caas-alerts/alertmanager)
	AmNotification(ctx context.Context, request AmNotificationRequestObject) (AmNotificationResponseObject, error)
	// Receive hardware alerts
	// (POST /internal/v1/hardware-alerts/{hwVendorName})
	HwNotification(ctx context.Context, request HwNotificationRequestObject) (HwNotificationResponseObject, error)
	// Get API versions
	// (GET /o2ims-infrastructureMonitoring/api_versions)
	GetAllVersions(ctx context.Context, request GetAllVersionsRequestObject) (GetAllVersionsResponseObject, error)
	// Retrieve the alarm service configuration
	// (GET /o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration)
	GetServiceConfiguration(ctx context.Context, request GetServiceConfigurationRequestObject) (GetServiceConfigurationResponseObject, error)
	// Modify individual fields of the Alarm Service Configuration.
	// (PATCH /o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration)
	PatchAlarmServiceConfiguration(ctx context.Context, request PatchAlarmServiceConfigurationRequestObject) (PatchAlarmServiceConfigurationResponseObject, error)
	// Modify all fields of the Alarm Service Configuration.
	// (PUT /o2ims-infrastructureMonitoring/v1/alarmServiceConfiguration)
	UpdateAlarmServiceConfiguration(ctx context.Context, request UpdateAlarmServiceConfigurationRequestObject) (UpdateAlarmServiceConfigurationResponseObject, error)
	// Retrieve the list of alarm subscriptions
	// (GET /o2ims-infrastructureMonitoring/v1/alarmSubscriptions)
	GetSubscriptions(ctx context.Context, request GetSubscriptionsRequestObject) (GetSubscriptionsResponseObject, error)
	// Create a new alarm subscription
	// (POST /o2ims-infrastructureMonitoring/v1/alarmSubscriptions)
	CreateSubscription(ctx context.Context, request CreateSubscriptionRequestObject) (CreateSubscriptionResponseObject, error)
	// Delete exactly one subscription
	// (DELETE /o2ims-infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	DeleteSubscription(ctx context.Context, request DeleteSubscriptionRequestObject) (DeleteSubscriptionResponseObject, error)
	// Retrieve exactly one subscription
	// (GET /o2ims-infrastructureMonitoring/v1/alarmSubscriptions/{alarmSubscriptionId})
	GetSubscription(ctx context.Context, request GetSubscriptionRequestObject) (GetSubscriptionResponseObject, error)
	// Retrieve the list of alarms
	// (GET /o2ims-infrastructureMonitoring/v1/alarms)
	GetAlarms(ctx context.Context, request GetAlarmsRequestObject) (GetAlarmsResponseObject, error)
	// Retrieve exactly one alarm
	// (GET /o2ims-infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	GetAlarm(ctx context.Context, request GetAlarmRequestObject) (GetAlarmResponseObject, error)
	// Modify an individual alarm record
	// (PATCH /o2ims-infrastructureMonitoring/v1/alarms/{alarmEventRecordId})
	PatchAlarm(ctx context.Context, request PatchAlarmRequestObject) (PatchAlarmResponseObject, error)
	// Get minor API versions
	// (GET /o2ims-infrastructureMonitoring/v1/api_versions)
	GetMinorVersions(ctx context.Context, request GetMinorVersionsRequestObject) (GetMinorVersionsResponseObject, error)
	// Retrieve all probable causes
	// (GET /o2ims-infrastructureMonitoring/v1/probableCauses)
	GetProbableCauses(ctx context.Context, request GetProbableCausesRequestObject) (GetProbableCausesResponseObject, error)
	// Retrieve exactly one probable cause
	// (GET /o2ims-infrastructureMonitoring/v1/probableCauses/{probableCauseId})
	GetProbableCause(ctx context.Context, request GetProbableCauseRequestObject) (GetProbableCauseResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// AmNotification operation middleware
func (sh *strictHandler) AmNotification(w http.ResponseWriter, r *http.Request) {
	var request AmNotificationRequestObject

	var body AmNotificationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AmNotification(ctx, request.(AmNotificationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AmNotification")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AmNotificationResponseObject); ok {
		if err := validResponse.VisitAmNotificationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// HwNotification operation middleware
func (sh *strictHandler) HwNotification(w http.ResponseWriter, r *http.Request, hwVendorName string) {
	var request HwNotificationRequestObject

	request.HwVendorName = hwVendorName

	var body HwNotificationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.HwNotification(ctx, request.(HwNotificationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HwNotification")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(HwNotificationResponseObject); ok {
		if err := validResponse.VisitHwNotificationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllVersions operation middleware
func (sh *strictHandler) GetAllVersions(w http.ResponseWriter, r *http.Request) {
	var request GetAllVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllVersions(ctx, request.(GetAllVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllVersionsResponseObject); ok {
		if err := validResponse.VisitGetAllVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetServiceConfiguration operation middleware
func (sh *strictHandler) GetServiceConfiguration(w http.ResponseWriter, r *http.Request) {
	var request GetServiceConfigurationRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetServiceConfiguration(ctx, request.(GetServiceConfigurationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetServiceConfiguration")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetServiceConfigurationResponseObject); ok {
		if err := validResponse.VisitGetServiceConfigurationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchAlarmServiceConfiguration operation middleware
func (sh *strictHandler) PatchAlarmServiceConfiguration(w http.ResponseWriter, r *http.Request) {
	var request PatchAlarmServiceConfigurationRequestObject

	var body PatchAlarmServiceConfigurationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchAlarmServiceConfiguration(ctx, request.(PatchAlarmServiceConfigurationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchAlarmServiceConfiguration")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchAlarmServiceConfigurationResponseObject); ok {
		if err := validResponse.VisitPatchAlarmServiceConfigurationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAlarmServiceConfiguration operation middleware
func (sh *strictHandler) UpdateAlarmServiceConfiguration(w http.ResponseWriter, r *http.Request) {
	var request UpdateAlarmServiceConfigurationRequestObject

	var body UpdateAlarmServiceConfigurationJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAlarmServiceConfiguration(ctx, request.(UpdateAlarmServiceConfigurationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAlarmServiceConfiguration")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAlarmServiceConfigurationResponseObject); ok {
		if err := validResponse.VisitUpdateAlarmServiceConfigurationResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscriptions operation middleware
func (sh *strictHandler) GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams) {
	var request GetSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptions(ctx, request.(GetSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionsResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSubscription operation middleware
func (sh *strictHandler) CreateSubscription(w http.ResponseWriter, r *http.Request) {
	var request CreateSubscriptionRequestObject

	var body CreateSubscriptionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSubscription(ctx, request.(CreateSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSubscription operation middleware
func (sh *strictHandler) DeleteSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID) {
	var request DeleteSubscriptionRequestObject

	request.AlarmSubscriptionId = alarmSubscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscription(ctx, request.(DeleteSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscription operation middleware
func (sh *strictHandler) GetSubscription(w http.ResponseWriter, r *http.Request, alarmSubscriptionId openapi_types.UUID) {
	var request GetSubscriptionRequestObject

	request.AlarmSubscriptionId = alarmSubscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscription(ctx, request.(GetSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAlarms operation middleware
func (sh *strictHandler) GetAlarms(w http.ResponseWriter, r *http.Request, params GetAlarmsParams) {
	var request GetAlarmsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlarms(ctx, request.(GetAlarmsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlarms")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAlarmsResponseObject); ok {
		if err := validResponse.VisitGetAlarmsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAlarm operation middleware
func (sh *strictHandler) GetAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID) {
	var request GetAlarmRequestObject

	request.AlarmEventRecordId = alarmEventRecordId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAlarm(ctx, request.(GetAlarmRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAlarm")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAlarmResponseObject); ok {
		if err := validResponse.VisitGetAlarmResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchAlarm operation middleware
func (sh *strictHandler) PatchAlarm(w http.ResponseWriter, r *http.Request, alarmEventRecordId openapi_types.UUID) {
	var request PatchAlarmRequestObject

	request.AlarmEventRecordId = alarmEventRecordId

	var body PatchAlarmJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchAlarm(ctx, request.(PatchAlarmRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchAlarm")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchAlarmResponseObject); ok {
		if err := validResponse.VisitPatchAlarmResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMinorVersions operation middleware
func (sh *strictHandler) GetMinorVersions(w http.ResponseWriter, r *http.Request) {
	var request GetMinorVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMinorVersions(ctx, request.(GetMinorVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMinorVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinorVersionsResponseObject); ok {
		if err := validResponse.VisitGetMinorVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProbableCauses operation middleware
func (sh *strictHandler) GetProbableCauses(w http.ResponseWriter, r *http.Request) {
	var request GetProbableCausesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProbableCauses(ctx, request.(GetProbableCausesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProbableCauses")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProbableCausesResponseObject); ok {
		if err := validResponse.VisitGetProbableCausesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetProbableCause operation middleware
func (sh *strictHandler) GetProbableCause(w http.ResponseWriter, r *http.Request, probableCauseId openapi_types.UUID) {
	var request GetProbableCauseRequestObject

	request.ProbableCauseId = probableCauseId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetProbableCause(ctx, request.(GetProbableCauseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProbableCause")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetProbableCauseResponseObject); ok {
		if err := validResponse.VisitGetProbableCauseResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "../../common/api/openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
